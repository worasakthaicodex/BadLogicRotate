/**=======================================================================================
 * BadLogicRotate
 * 
 * 
 * Copyright (c) 2025, 
 *======================================================================================*/
/**=======================================================================================
*BadLogicRotate: A dynamic tool designed to handle image rotation seamlessly, enabling users to easily rotate images 
*and manage transformations within a web interface. The concept and development of this tool were inspired by collaboration with ChatGPT 
and Tao, who provided essential insights and guidance in its creation.
 *  ChatGPT 99.99
 *  Tao     00.01 
 
 
 <div id="cameraArea"></div>

<script>
    BadLogicRotate.init("cameraArea", {
        videoWidth: "100%",
        buttonClass: "btn btn-primary",
        captureText: "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
        pdfText: "‡∏£‡∏ß‡∏° PDF",
        pdfName: "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠  pdf ‡πÄ‡∏≠‡∏á",
        cancelText: "‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á",
        imagePreviewWidth: "120px",
        inputFileId: "uploadFileInput",  
        download:  options.download || "true or false",// <<<<--- ‡∏™‡πà‡∏á id ‡∏Ç‡∏≠‡∏á input ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤
        cameraButtonId: options.cameraButtonId || "openCameraButton"  // ‡πÄ‡∏û‡∏¥‡πà‡∏° cameraButtonId,
        onStart: options.onStart || function() {},  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        onCancel: options.onCancel || function() {},  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        onGeneratePdf: options.onGeneratePdf || function() {},  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û  // ‡πÄ‡∏û‡∏¥‡πà‡∏° cameraButtonId
        onCapture: options.onCapture || function() {}  // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Capture
    });
</script>
 
 *======================================================================================*/
 
 const BadLogicRotate = {
    init(targetDivId, options = {}) {
        const container = document.getElementById(targetDivId);
        if (!container) {
            console.error("BadLogicRotate: Target div not found:", targetDivId);
            return;
        }

        // Initialize properties
        this.divCount = 0;
        this.cameraOpened = false;
        this.base64Images = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö


        // Default options
        this.options = {
            videoWidth: options.videoWidth || "100%",
            buttonClass: options.buttonClass || "btn btn-primary",
            captureText: options.captureText || "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ",
            pdfText: options.pdfText || "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô PDF",
            pdfName: options.pdfName,
            cancelText: options.cancelText || "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            imagePreviewWidth: options.imagePreviewWidth || "100px",
            inputFileId: options.inputFileId || "badlogic-upload-input",
            download:  options.download,
            cameraButtonId: options.cameraButtonId || "openCameraButton",
            onStart: options.onStart || function () {},
            onCancel: options.onCancel || function () {},
            onGeneratePdf: options.onGeneratePdf || function () {},
            onCapture: options.onCapture || function () {}
        };

        container.innerHTML = `
            <div class="camera-controls">
                <video id="cameraFeed" autoplay style="width:${this.options.videoWidth};"></video>
                <br><br>
                <div class="camera-buttons">
                    <a href="#" id="captureButton" class="${this.options.buttonClass}">${this.options.captureText}</a>
                    <a href="#" id="generatePdfButton" class="${this.options.buttonClass}">${this.options.pdfText}</a>
                    <a href="#" id="closeButton" class="btn btn-light">${this.options.cancelText}</a>
                    <input type="file" accept="image/*" id="${this.options.inputFileId}" style="display:none;">
                </div>
            </div>
            <br>
            <div class="photo-display">
                <canvas id="photoCanvas" style="width:100%; border: 1px solid #ccc;"></canvas>
                <div class="row" id="card-drag-area"></div>
            </div>
        `;

        this.setupEvents();
    },

    setupEvents() {
        document.getElementById(this.options.cameraButtonId).addEventListener("click", () => {
            this.camera();
        });

        document.getElementById("closeButton").addEventListener("click", () => {
            this.close();
        });

        // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö captureButton ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        document.getElementById("captureButton").addEventListener("click", () => {
            this.capture();
        });
        
                // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö captureButton ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        document.getElementById("generatePdfButton").addEventListener("click", () => {
            this.generatePdf();
        });
        
        
    },

    camera() {
        this.options.onStart();

        if (!this.cameraOpened) {
            this.cameraOpened = true;
            const cameraFeed = document.getElementById('cameraFeed');

            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    cameraFeed.srcObject = stream;
                })
                .catch((error) => {
                    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á: ', error);
                });
        }
    },

    capture() {
	
	    this.options.onCapture();
        const cameraFeed = document.getElementById('cameraFeed');
        const photoCanvas = document.getElementById('photoCanvas');

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å createNewDiv
        this.createNewDiv();

        // ‡πÅ‡∏™‡∏î‡∏á canvas ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
        photoCanvas.style.display = 'block';
        const context = photoCanvas.getContext('2d');

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á canvas ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
        photoCanvas.width = cameraFeed.videoWidth;
        photoCanvas.height = cameraFeed.videoHeight;

        // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ö‡∏ô canvas
        context.drawImage(cameraFeed, 0, 0, cameraFeed.videoWidth, cameraFeed.videoHeight);

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        const capturedPhoto = document.getElementById("capturedPhoto" + this.divCount);
        capturedPhoto.src = photoCanvas.toDataURL('image/png'); // ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å canvas ‡πÄ‡∏õ‡πá‡∏ô base64
        capturedPhoto.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        capturedPhoto.style.width = '100%'; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà

        // ‡∏ã‡πà‡∏≠‡∏ô canvas ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
        photoCanvas.style.display = 'none';
    },

    stopCamera() {
        if (this.cameraOpened) {
            const cameraFeed = document.getElementById('cameraFeed');
            const stream = cameraFeed.srcObject;
            if (stream) {
                const tracks = stream.getTracks();
                tracks.forEach(track => track.stop()); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡∏£‡πá‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
                cameraFeed.srcObject = null; // ‡∏•‡πâ‡∏≤‡∏á srcObject
            }
            this.cameraOpened = false; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
        }
    },

    close() {
        this.stopCamera();
        this.options.onCancel();
    },

    createNewDiv() {
        const cardDragArea = document.getElementById("card-drag-area");
        if (!cardDragArea) {
            console.error("card-drag-area not found");
            return;
        }

        this.divCount++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô div

        const newDiv = document.createElement("div");
        newDiv.className = "col-xl-4 col-md-4 col-sm-4 draggable";
        newDiv.id = "card" + this.divCount; // ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö

        newDiv.innerHTML = `
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Card ${this.divCount}</h4>
                    <span>
                    <a href="#" onclick="BadLogicRotate.Invert(${this.divCount})">üîÑ</a>
                     <a href="#" onclick="BadLogicRotate.deleteCard(this)" style="color:red">‚ùå</a>
                     </span>
                </div>
                <div class="card-body">
                    <img id="capturedPhoto${this.divCount}" class="capture" style="width:100%;float:left;margin-left:5px" alt="‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢">
                </div>
            </div>
        `;

        cardDragArea.appendChild(newDiv); // ‡πÄ‡∏û‡∏¥‡πà‡∏° div ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô card-drag-area
    }
    
    
    ,deleteCard(button) {
        const cardDiv = button.closest('.draggable');
        if (cardDiv) {
            cardDiv.remove(); // ‡∏•‡∏ö div ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        }
    }
    
    
    ,Invert(button) {
	
        var base64Images = this.base64Images;
        var capturedPhoto = document.getElementById("capturedPhoto" + button);

        if (!base64Images[button]) {
            base64Images[button] = {
                originalSrc: capturedPhoto.src,
                rotation: 0
            };
        }

        base64Images[button].rotation = (base64Images[button].rotation + 90) % 360;
        const newAngle = base64Images[button].rotation;

        const img = new Image();
        img.src = base64Images[button].originalSrc;

        img.onload = () => {
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");

            if (newAngle === 90 || newAngle === 270) {
                canvas.width = img.height;
                canvas.height = img.width;
            } else {
                canvas.width = img.width;
                canvas.height = img.height;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // ‡∏¢‡πâ‡∏≤‡∏¢ origin ‡πÑ‡∏õ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á canvas
            ctx.translate(canvas.width / 2, canvas.height / 2);
            ctx.rotate((newAngle * Math.PI) / 180);

            // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏ß‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏° canvas ‡πÉ‡∏´‡∏°‡πà!
            ctx.drawImage(
                img,
                -img.width / 2, // ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
                -img.height / 2, 
                img.width,       // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°
                img.height
            );

            capturedPhoto.src = canvas.toDataURL("image/png");
        };
    }
    
    
    ,generatePdf() {
	
	
	   this.options.onGeneratePdf();
	   window.jsPDF = window.jspdf.jsPDF;
	
	
		 if (!window.jspdf || !window.jspdf.jsPDF) {
	            console.error("jsPDF library is not loaded");
	            return;
	        }
		
		
		
		  const doc = new jsPDF();

        let yOffset = 10;

        
        const elementsWithClass = document.querySelectorAll('.capture');

     // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ src
     var base64Images = [];

 
     var i = 0;
     // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™
     elementsWithClass.forEach(element => {
         const src = element.getAttribute('src');
         if (src.startsWith('data:image') || src.startsWith('blob:')) {
        	i++;
        	 const currentRotation = element.style.transform || "rotate(0deg)";
        	 console.error('Invalid i ', i);
           //  base64Images.push(src);
             base64Images.push({ src: src, rotation: currentRotation });
             
         } else {
             console.error('Invalid image src:', src);
         }
     });
        

     if (base64Images.length === 0) {
         console.error('No images found');
     }

     base64Images.forEach(imageData => {
          const img = new Image();
        
  
          img.src = imageData.src;
          var imageBase64 = imageData.src;

          
          
         
   
        	  var maxWidth = doc.internal.pageSize.getWidth();
              var maxHeight = doc.internal.pageSize.getHeight();

              var imgWidth = img.width;
              var imgHeight = img.height;

              
              console.log(" IMG "+img.width);
              
              var width, height;
              var page = null;

              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
              const aspectRatio = imgWidth / imgHeight;

              // ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÉ‡∏´‡πâ‡∏¢‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
              if (imgWidth > imgHeight) {
                  page = "l";
                  width = 278;
                  height = width / aspectRatio; // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å imgWidth ‡πÄ‡∏õ‡πá‡∏ô width
              } else {
                  width =maxWidth;
                  height = maxHeight;
              }




              // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              if (page === 'l') {
                  doc.addPage(null, 'l');
                  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô PDF
                  doc.addImage(imageBase64, "PNG", 10, 10, width, height - 20);
              } else {
                  doc.addPage();
                  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô PDF
                  doc.addImage(imageBase64, "PNG", 10, 10, width- 20, height);
              }
        
          
          
        });
        doc.deletePage(1);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF
        const pdfDataUri = doc.output('datauristring');


        
        
        const base64Data = pdfDataUri; // Your Base64 PDF data here

     // Create a Blob from the Base64 data
     const byteCharacters = atob(base64Data.split(',')[1]);
     const byteArrays = [];

     for (let offset = 0; offset < byteCharacters.length; offset += 512) {
       const slice = byteCharacters.slice(offset, offset + 512);

       const byteNumbers = new Array(slice.length);
       for (let i = 0; i < slice.length; i++) {
         byteNumbers[i] = slice.charCodeAt(i);
       }

       const byteArray = new Uint8Array(byteNumbers);
       byteArrays.push(byteArray);
     }

     const blob = new Blob(byteArrays, { type: 'application/pdf' });
        
        
   if (this.options.download == true ) {     
	    const downloadLink = document.createElement('a');
	    downloadLink.href = URL.createObjectURL(blob);
	    downloadLink.download = 'output.pdf';
	     downloadLink.click();
    }
     
     
     
	if (!this.options.inputFileId ) {
	            console.error("inputFileId is Not found ");
	         
	  }else{
	var inp  = document.getElementById(this.options.inputFileId);
	const dT = new DataTransfer();
	
	  const pdf_name = this.options.pdfName == null ? 'created_auto.pdf' : this.options.pdfName;
      const file = new File([blob],pdf_name, { type: 'application/pdf' });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô DataTransfer
      dT.items.add(file);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô input file
      inp.files = dT.files;
		
	}
      
  
        
	
	}
    
    
};


